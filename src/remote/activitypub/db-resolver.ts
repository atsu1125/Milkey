import config from '../../config';
import { Note } from '../../models/entities/note';
import { User, IRemoteUser } from '../../models/entities/user';
import { UserPublickey } from '../../models/entities/user-publickey';
import { MessagingMessage } from '../../models/entities/messaging-message';
import { Notes, Users, UserPublickeys, MessagingMessages } from '../../models';
import { IObject, getApId } from './type';
import { resolvePerson } from './models/person';
import { ensure } from '../../prelude/ensure';
import escapeRegexp = require('escape-regexp');

export type UriParseResult = {
	/** wether the URI was generated by us */
	local: true;
	/** id in DB */
	id: string;
	/** hint of type, e.g. "notes", "users" */
	type: string;
	/** any remaining text after type and id, not including the slash after id. undefined if empty */
	rest?: string;
} | {
	/** wether the URI was generated by us */
	local: false;
	/** uri in DB */
	uri: string;
};

export type AuthUser = {
	user: IRemoteUser;
	key?: UserPublickey;
};

export function parseUri(value: string) : UriParseResult {
	const uri = getApId(value);

	// the host part of a URL is case insensitive, so use the 'i' flag.
	const localRegex = new RegExp('^' + escapeRegexp(config.url) + '/(\\w+)/(\\w+)(?:\/(.+))?', 'i');
	const matchLocal = uri.match(localRegex);

	if (matchLocal) {
		return {
			local: true,
			type: matchLocal[1],
			id: matchLocal[2],
			rest: matchLocal[3],
		};
	} else {
		return {
			local: false,
			uri,
		};
	}
}

export default class DbResolver {
	constructor() {
	}

	/**
	 * AP Note => Groundpolis Note in DB
	 */
	public async getNoteFromApId(value: string | IObject): Promise<Note | null> {
		const parsed = parseUri(value);

		if (parsed.local) {
			if (parsed.type !== 'notes') return null;

			return await Notes.findOne({
				id: parsed.id,
			});
		} else {
			return await Notes.findOne({
				uri: parsed.uri,
			});
		}
	}

	public async getMessageFromApId(value: string | IObject): Promise<MessagingMessage | null> {
		const parsed = parseUri(value);

		if (parsed.local) {
			if (parsed.type !== 'notes') return null;

			return await MessagingMessages.findOne({
				id: parsed.id,
			});
		} else {
			return await MessagingMessages.findOne({
				uri: parsed.uri,
			});
		}
	}

	/**
	 * AP Person => Groundpolis User in DB
	 */
	public async getUserFromApId(value: string | IObject): Promise<User | null> {
		const parsed = parseUri(value);

		if (parsed.local) {
			if (parsed.type !== 'users') return null;

			return (await Users.findOne({
				id: parsed.id
			})) || null;
		} else {
			return (await Users.findOne({
				uri: parsed.uri
			})) || null;
		}
	}

	/**
	 * AP KeyId => Groundpolis User and Key
	 */
	public async getAuthUserFromKeyId(keyId: string): Promise<AuthUser | null> {
		const key = await UserPublickeys.findOne({
			keyId
		});

		if (key == null) return null;

		const user = await Users.findOne(key.userId) as IRemoteUser;

		return {
			user,
			key
		};
	}

	/**
	 * AP Actor id => Groundpolis User and Key
	 */
	public async getAuthUserFromApId(uri: string): Promise<AuthUser | null> {
		const user = await resolvePerson(uri) as IRemoteUser;

		if (user == null) return null;

		const key = await UserPublickeys.findOne(user.id).then(ensure);

		return {
			user,
			key
		};
	}
}
